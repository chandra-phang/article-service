// Code generated by MockGen. DO NOT EDIT.
// Source: article_repo.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	repository "article-service/db/repository"
	model "article-service/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIArticleRepository is a mock of IArticleRepository interface.
type MockIArticleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIArticleRepositoryMockRecorder
}

// MockIArticleRepositoryMockRecorder is the mock recorder for MockIArticleRepository.
type MockIArticleRepositoryMockRecorder struct {
	mock *MockIArticleRepository
}

// NewMockIArticleRepository creates a new mock instance.
func NewMockIArticleRepository(ctrl *gomock.Controller) *MockIArticleRepository {
	mock := &MockIArticleRepository{ctrl: ctrl}
	mock.recorder = &MockIArticleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIArticleRepository) EXPECT() *MockIArticleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIArticleRepository) Create(ctx context.Context, article *model.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, article)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIArticleRepositoryMockRecorder) Create(ctx, article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIArticleRepository)(nil).Create), ctx, article)
}

// GetRecordsCount mocks base method.
func (m *MockIArticleRepository) GetRecordsCount(ctx context.Context, filter repository.ArticleFilter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordsCount", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordsCount indicates an expected call of GetRecordsCount.
func (mr *MockIArticleRepositoryMockRecorder) GetRecordsCount(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordsCount", reflect.TypeOf((*MockIArticleRepository)(nil).GetRecordsCount), ctx, filter)
}

// List mocks base method.
func (m *MockIArticleRepository) List(ctx context.Context, filter repository.ArticleFilter) ([]*model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter)
	ret0, _ := ret[0].([]*model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIArticleRepositoryMockRecorder) List(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIArticleRepository)(nil).List), ctx, filter)
}
