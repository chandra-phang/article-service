package lib

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"net/http"
	"net/url"
	"strings"
	"testing"

	"github.com/go-chi/chi"
)

type incomingRequestBuilder struct {
	t *testing.T
	r *http.Request
}

func NewIncomingRequestBuilder(t *testing.T) *incomingRequestBuilder {
	t.Helper()
	r := &http.Request{
		Header: http.Header{},
	}
	return &incomingRequestBuilder{t, r}
}

func (i *incomingRequestBuilder) Build() *http.Request {
	i.t.Helper()
	return i.r
}

// WithJSONBytes sets the request body with the given JSON bytes.
func (i *incomingRequestBuilder) WithJSONBytes(jsonBytes []byte) *incomingRequestBuilder {
	i.t.Helper()
	i.r.Body = io.NopCloser(bytes.NewBuffer(jsonBytes))
	i.r.Header.Add("Content-Type", "application/json")
	return i
}

// WithJSONBytes sets the request body with the given JSON string.
func (i *incomingRequestBuilder) WithJSON(jsonStr string) *incomingRequestBuilder {
	i.t.Helper()
	return i.WithJSONBytes([]byte(jsonStr))
}

// WithJSONMarshal sets the request body with JSON bytes generated by marshalling
// the given struct value.
func (i *incomingRequestBuilder) WithJSONMarshal(obj interface{}) *incomingRequestBuilder {
	i.t.Helper()
	jsonBytes, err := json.Marshal(obj)
	if err != nil {
		panic(err)
	}
	return i.WithJSONBytes(jsonBytes)
}

type errReader struct{ err error }

func (r errReader) Close() error             { return nil }
func (r errReader) Read([]byte) (int, error) { return 0, r.err }

// WithErrRequestBody sets the request body to return error when .
func (i *incomingRequestBuilder) WithErrRequestBody(returnErr error) *incomingRequestBuilder {
	i.t.Helper()
	i.r.Body = errReader{returnErr}
	i.r.Header.Add("Content-Type", "application/json")
	return i
}

// WithPathParam sets a path param in the Chi RouteContext of the request.
// For example:
//   - Suppose you have a route like `GET /api/users/{username}/permissions`
//   - Call this function:  WithPathParam("username", "user@example.com")
func (i *incomingRequestBuilder) WithPathParam(pathFragment, value string) *incomingRequestBuilder {
	i.t.Helper()
	var rctx *chi.Context
	if i.r.Context() != context.Background() {
		rctx = chi.RouteContext(i.r.Context())
	} else {
		rctx = chi.NewRouteContext()
	}
	rctx.URLParams.Add(pathFragment, value)
	ctx := context.WithValue(i.r.Context(), chi.RouteCtxKey, rctx)
	i.r = i.r.WithContext(ctx)
	return i
}

// WithQueryString sets a query param in the request. For example:
//   - Suppose you want to mimic a request like `GET /api/users?id=123&status=ACTIVE`
//   - Call this function:  WithQueryString("id=123&status=ACTIVE")
func (i *incomingRequestBuilder) WithQueryString(query string) *incomingRequestBuilder {
	i.t.Helper()
	if i.r.URL == nil {
		url := url.URL{}
		i.r.URL = &url
	}
	q := i.r.URL.Query()
	for _, value := range strings.Split(query, "&") {
		params := strings.Split(value, "=")
		if len(params) == 2 {
			q.Add(params[0], params[1])
		}
	}
	i.r.URL.RawQuery = q.Encode()
	return i
}

// NormJSON normalizes a JSON string.
func NormJSON(t *testing.T, jsonStr string) string {
	t.Helper()

	var x any
	if err := json.Unmarshal([]byte(jsonStr), &x); err != nil {
		t.Fatalf("failed to parse jsonStr as JSON, err: %v", err)
	}
	j, _ := json.MarshalIndent(x, "  ", "  ")
	return string(j)
}
