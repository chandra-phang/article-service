// Code generated by MockGen. DO NOT EDIT.
// Source: article_search.go

// Package mock_search is a generated GoMock package.
package mock_search

import (
	model "article-service/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIArticleSearch is a mock of IArticleSearch interface.
type MockIArticleSearch struct {
	ctrl     *gomock.Controller
	recorder *MockIArticleSearchMockRecorder
}

// MockIArticleSearchMockRecorder is the mock recorder for MockIArticleSearch.
type MockIArticleSearchMockRecorder struct {
	mock *MockIArticleSearch
}

// NewMockIArticleSearch creates a new mock instance.
func NewMockIArticleSearch(ctrl *gomock.Controller) *MockIArticleSearch {
	mock := &MockIArticleSearch{ctrl: ctrl}
	mock.recorder = &MockIArticleSearchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIArticleSearch) EXPECT() *MockIArticleSearchMockRecorder {
	return m.recorder
}

// Index mocks base method.
func (m *MockIArticleSearch) Index(ctx context.Context, article model.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", ctx, article)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index.
func (mr *MockIArticleSearchMockRecorder) Index(ctx, article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockIArticleSearch)(nil).Index), ctx, article)
}

// Search mocks base method.
func (m *MockIArticleSearch) Search(ctx context.Context, query string) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, query)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockIArticleSearchMockRecorder) Search(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockIArticleSearch)(nil).Search), ctx, query)
}
